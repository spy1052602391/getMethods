package com.取得一个类中的全部普通方法;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

class Person{
    private String name;
    private int age;
    public Person(){}
    public Person(String name,int age){
        this.name = name;
        this.age = age;
    }

    public String toString(){
        return "Person [name=" + name + ", age=" + age + "]";
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

public class Test {
    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {
        Class<?> cls = Person.class;
        //任何时候调用类中的普通方法都必须有类的实例化对象
        Object obj = cls.newInstance();
        //取得setName这个方法的实例化对象，设置方法名称与参数类型
        Method setName = cls.getMethod("setName", String.class);
        //随后需要通过Method类对象调用指定的方法，调用方法需要有实例化对象
        //同时传入参数
        setName.invoke(obj,"yuissama");   //相当于Person.setName(str);
        Method getMethod = cls.getMethod("getName");
        Object result = getMethod.invoke(obj);  //相当于Person.getName();
        System.out.println(result);
        //取得全部普通方法
        Method[] methods = cls.getMethods();
        for(Method method : methods){
            System.out.println(method);
        }
    }
}
